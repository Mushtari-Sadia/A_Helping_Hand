import os
import django
from django.db import connection

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'A_Helping_Hand.settings')
django.setup()

# ****COMMENTED OUT BECAUSE CUSTOMER TABLE IS ALREADY CREATED****
connection.cursor().execute("CREATE TABLE Customer(customer_id NUMBER GENERATED BY DEFAULT AS IDENTITY," +
         "first_name VARCHAR2(50) NOT NULL," +
         "last_name VARCHAR2(50) NOT NULL," +
 		"password  VARCHAR2(40)  NOT NULL," +
 		"phone_number VARCHAR2(11)," +
 		"thana_name VARCHAR2(30) NOT NULL," +
 		"address VARCHAR2(70)," +
 		"date_of_birth DATE NOT NULL," +
 		"rating NUMBER(2,1) CHECK (rating BETWEEN 0.0 AND 5.0)," +
         "PRIMARY KEY(customer_id));")

# TODO FARDIN 0 : REMEMBER TO PULL FROM GITKRAKEN

connection.cursor().execute("CREATE TABLE Order_Info(order_id NUMBER GENERATED BY DEFAULT AS IDENTITY," +
         "start_time VARCHAR2(5) NOT NULL," +
         "end_time VARCHAR2(5) NOT NULL," +
         "PRIMARY KEY(order_id));")


connection.cursor().execute("CREATE TABLE Service_Provider(worker_id NUMBER GENERATED BY DEFAULT AS IDENTITY," +
         "first_name VARCHAR2(50) NOT NULL," +
         "last_name VARCHAR2(50) NOT NULL," +
 		"password  VARCHAR2(40)  NOT NULL," +
		"phone_number VARCHAR2(11)," +
 		"thana_name VARCHAR2(30) NOT NULL," +
 		"address VARCHAR2(70)," +
 		"date_of_birth DATE NOT NULL," +
		"payment_per_hour NUMBER,"+
 		"rating NUMBER(2,1) CHECK (rating BETWEEN 0.0 AND 5.0)," +
        "PRIMARY KEY(worker_id));")


connection.cursor().execute("CREATE TABLE Service_Request(customer_id NUMBER," +
         "order_id NUMBER," +
         "worker_id NUMBER,"+
		 "FOREIGN KEY(customer_id) REFERENCES Customer(customer_id),"+
		 "FOREIGN KEY(order_id) REFERENCES Order_Info(order_id),"+
		 "FOREIGN KEY(worker_id) REFERENCES SERVICE_PROVIDER(worker_id),"+
		 "PRIMARY KEY(worker_id,order_id,customer_id));")


connection.cursor().execute("CREATE TABLE Emergency_Phone_Number(emergency_id NUMBER GENERATED BY DEFAULT AS IDENTITY," +
         "emergency_type VARCHAR2(20) NOT NULL," +
         "phone_number VARCHAR2(11)," +
		 "address VARCHAR2(70),"+
         "PRIMARY KEY(emergency_id));")

connection.cursor().execute("CREATE TABLE In_An_Emergency(emergency_id NUMBER," +
         "customer_id NUMBER,"+
		 "FOREIGN KEY(emergency_id) REFERENCES Emergency_Phone_Number(emergency_id),"+
		 "FOREIGN KEY(customer_id) REFERENCES Customer(customer_id),"+
		 "PRIMARY KEY(emergency_id,customer_id));")


connection.cursor().execute("CREATE TABLE Electrician(worker_id NUMBER," +
         "electrician_id NUMBER GENERATED BY DEFAULT AS IDENTITY," +
         "license_info VARCHAR2(20)," +
		 "years_of_experience NUMBER,"+
		 "qualification VARCHAR2(50),"+
		 "FOREIGN KEY(worker_id) REFERENCES Service_Provider(worker_id));")


connection.cursor().execute("CREATE TABLE Appliances(appliances_id NUMBER," +
         "type VARCHAR2(20)," +
         "PRIMARY KEY(appliances_id));")


connection.cursor().execute("CREATE TABLE Area_Of_Expertise(worker_id NUMBER," +
         "appliances_id NUMBER,"+
		 "FOREIGN KEY(appliances_id) REFERENCES Appliances(appliances_id),"+
		 "FOREIGN KEY(worker_id) REFERENCES Service_Provider(worker_id));")


connection.cursor().execute("CREATE TABLE Group_Electrician(order_id NUMBER," +
         "electrician_id NUMBER,"+
		 "teamLeader_id NUMBER,"+
		 "FOREIGN KEY(order_id) REFERENCES Order_Info(order_id),"+
		 "PRIMARY KEY(order_id));")


connection.cursor().execute("CREATE TABLE Home_Cleaner(worker_id NUMBER," +
         "homeCleaner_id NUMBER GENERATED BY DEFAULT AS IDENTITY," +
		 "NID NUMBER,"+
		 "FOREIGN KEY(worker_id) REFERENCES Service_Provider(worker_id),"+
		 "PRIMARY KEY(worker_id));")


connection.cursor().execute("CREATE TABLE Pest_Control(worker_id NUMBER," +
         "pestControl_id NUMBER GENERATED BY DEFAULT AS IDENTITY," +
         "license_info VARCHAR2(20)," +
		 "chemical_info VARCHAR2(50),"+
		 "FOREIGN KEY(worker_id) REFERENCES Service_Provider(worker_id),"+
		 "PRIMARY KEY(worker_id));")


connection.cursor().execute("CREATE TABLE Group_Pest_Control(order_id NUMBER," +
         "pestControl_id NUMBER," +
         "teamLeader_id NUMBER,"+
		 "FOREIGN KEY(order_id) REFERENCES Order_Info(order_id),"+
		 "PRIMARY KEY(order_id));")


connection.cursor().execute("CREATE TABLE Plumber(worker_id NUMBER," +
         "plumber_id NUMBER GENERATED BY DEFAULT AS IDENTITY," +
		 "years_of_experience NUMBER,"+
		 "FOREIGN KEY(worker_id) REFERENCES Service_Provider(worker_id),"+
		 "PRIMARY KEY(worker_id));")


connection.cursor().execute("CREATE TABLE Nurse(worker_id NUMBER," +
         "nurse_id NUMBER GENERATED BY DEFAULT AS IDENTITY," +
		 "certificate_info VARCHAR2(20),"+
		 "qualification VARCHAR2(50),"+
		 "years_of_experience NUMBER,"+
		 "FOREIGN KEY(worker_id) REFERENCES Service_Provider(worker_id),"+
		 "PRIMARY KEY(worker_id));")


connection.cursor().execute("CREATE TABLE House_Shifting_Assistant(worker_id NUMBER," +
         "house_shifting_assistant_id NUMBER GENERATED BY DEFAULT AS IDENTITY," +
		 "driving_license VARCHAR2(20),"+
		 "car_type VARCHAR2(20),"+
		 "car_no VARCHAR2(20),"+
		 "FOREIGN KEY(worker_id) REFERENCES Service_Provider(worker_id),"+
		 "PRIMARY KEY(worker_id));")


connection.cursor().execute("CREATE TABLE Group_House_Shifting_Assistant(order_id NUMBER," +
         "house_shifting_assistant_id NUMBER," +
         "teamLeader_id NUMBER,"+
		 "FOREIGN KEY(order_id) REFERENCES Order_Info(order_id),"+
		 "PRIMARY KEY(order_id));")


connection.cursor().execute("CREATE TABLE Carpenter(worker_id NUMBER," +
         "carpenter_id NUMBER GENERATED BY DEFAULT AS IDENTITY," +
		 "shop_name VARCHAR2(20),"+
		 "shop_address VARCHAR2(70),"+
	     "FOREIGN KEY(worker_id) REFERENCES Service_Provider(worker_id),"+
		 "PRIMARY KEY(worker_id));")
OPTIONS = [
        (1, "AC"),
        (2, "TV"),
        (3, "FRIDGE"),
        (4, "GENERAL"),
    ]

for i in OPTIONS:
	connection.cursor().execute(
							"INSERT INTO APPLIANCES(APPLIANCES_ID,TYPE)"
							+ " VALUES ('" + str(i[0]) + "','"  + str(i[1]) + "')")